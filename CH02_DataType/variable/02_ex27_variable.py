# 변수
# 자료형의 값을 저장하는 공간
# 변수를 만들 때는 = 기호를 사용한다. 변수명 = 변수에 저장할 값
# 파이썬에서는 변수에 저장된 값을 스스로 판단하여 자료형을 지정한다.
a = 1
b = "python"
c = [1, 2, 3]

# 변수는 객체를 가리키는 것이라고도 할 수 있다.
# 여기서 객체는 우리가 지금껏 보아 온 자료형과 같은 것을 의미한다.
d = [1, 2, 3] # 변수 d는 리스트가 저장된 메모리의 주소를 가리키게 된다.
print(id(d)) # 변수 d가 가리키는 메모리의 주소를 확인하는 id() 함수

# 리스트 복사
e = [1, 2, 3]
f = e
# f 변수에 e 변수를 대입하면 f와 e는 완전히 동일한 상태이다.
# 동일하다는 것은, 동일한 [1, 2, 3] 리스트를 참조하는 변수가 e와 f라는 의미이다. (리스트는 1개 - 이를 참조하는 변수는 2개)
print(id(e))
print(id(f)) # id(e)와 id(f)의 결과가 동일함을 확인할 수 있다.
print(e is f) # 동일한 객체를 가리키고 있는지 판단하는 명령어 is를 실행해도 True를 반환하고 출력한다.

e[1] = 4
print(e)
print(f) # e의 두 번째 요소만 바꾸었을 뿐인데 f의 두 번째 요소도 똑같이 바뀜 - 동일한 리스트를 가리키기 때문

# 하나의 변수에 있는 값을 다른 하나의 변수에 동일한 값과 다른 주소를 가리키도록 만드는 방법
# 1. [:] 이용하여 리스트 복사
g = [1, 2, 3]
h = g[:] # 리스트 전체를 가리키는 [:] 사용하여 복사
g[1] = 4
print(g)
print(h) # 리스트 g의 값을 바꾸더라도 리스트 h에는 영향을 끼치지 않음을 확인할 수 있다.

# 2. copy 모듈의 copy 함수 사용
from copy import copy
i = [1, 2, 3]
j = copy(i) # 리스트 i의 값을 변수 j에 복사한다. (j = i[:]과 동일)
print(i is j) # i와 j가 가리키는 주소가 달라 False 출력됨을 확인 가능

# 3. 리스트 자료형의 copy 함수 사용
k = [1, 2, 3]
l = k.copy()
print(k is l) # False

# 변수를 만드는 여러 방법
# 1. 자료구조로 값 대입
m, n = ("python", "life")
(m, n) = "python", "life" # 튜플로 값을 대입하는 방법
[m, n] = ["python", "life"] # 리스트로 값을 대입하는 방법

# 2. 여러 개의 변수에 같은 값을 대입
o = p = "python"

# 3. 2번 방법을 사용하여 두 변수의 값 변경
q = 3
r = 5
q, r = r, q
print(q)
print(r) # 값이 서로 변경됨을 확인

